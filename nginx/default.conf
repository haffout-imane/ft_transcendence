# Upstream definitions for microservices
upstream auth_backend {
    server auth:3000;  # Adjust port as needed
}

upstream game_backend {
    server game:3001;  # Adjust port as needed
}

upstream chat_backend {
    server chat:3002;  # Adjust port as needed
}

upstream frontend_backend {
    server frontend:3003;  # Frontend typically serves on port 80
}

# HTTP server - redirects all traffic to HTTPS
server {
    listen 80;
    server_name _;
    
    # Redirect all HTTP requests to HTTPS
    return 301 https://$host$request_uri;
}

# HTTPS server
server {
    listen 443 ssl http2;
    server_name _;

    # SSL Configuration
    ssl_certificate /etc/nginx/certs/cert.pem;
    ssl_certificate_key /etc/nginx/certs/key.pem;
    
    # SSL Security Settings
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Security Headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
	add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'; connect-src 'self' ws: wss:" always;
    # General proxy settings
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_redirect off;

    # Auth service routes - /api and /auth
    location /api {
        proxy_pass http://auth_backend;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-Server $host;
    }

    location /auth {
        proxy_pass http://auth_backend;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-Server $host;
    }

    # Game service WebSocket route - /ws/game
    location /ws/game {
        proxy_pass http://game_backend;
        
        # WebSocket specific headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket timeout settings
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
        proxy_connect_timeout 86400;
    }

    # Chat service WebSocket route - /ws/chat
    location /ws/chat {
        proxy_pass http://chat_backend;
        
        # WebSocket specific headers
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket timeout settings
        proxy_read_timeout 86400;
        proxy_send_timeout 86400;
        proxy_connect_timeout 86400;
    }

    # Health check endpoint
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # Default location for any other requests
    location / {
        try_files $uri $uri/ @frontend;
    }

    # Frontend SPA fallback
    location @frontend {
        proxy_pass http://frontend_backend;
        proxy_set_header X-Forwarded-Host $server_name;
        proxy_set_header X-Forwarded-Server $host;
        
        # SPA specific settings
        proxy_intercept_errors on;
        error_page 404 = @fallback;
    }

    # SPA fallback for client-side routing
    # location @fallback {
    #     proxy_pass http://frontend_backend/index.html;
    #     proxy_set_header X-Forwarded-Host $server_name;
    #     proxy_set_header X-Forwarded-Server $host;
    # }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        return 404 "Not Found\n";
        add_header Content-Type text/plain;
    }
    
    location = /50x.html {
        return 500 "Internal Server Error\n";
        add_header Content-Type text/plain;
    }
}